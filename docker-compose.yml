version: "3.9"

services:
  db:
    image: postgres:15-alpine
    container_name: db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - dbdata:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      # Postgres no expone HTTP; usa pg_isready
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  app:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: app
    depends_on:
      db:
        condition: service_healthy
    environment:
      # Perfil de Spring a usar
      SPRING_PROFILES_ACTIVE: docker
      # Vars de tu .env (mantén los nombres APP_* tal cual)
      APP_ENV: ${APP_ENV}
      APP_DB_HOST: ${APP_DB_HOST}
      APP_DB_PORT: ${APP_DB_PORT}
      APP_DB_NAME: ${APP_DB_NAME}
      APP_DB_USER: ${APP_DB_USER}
      APP_DB_PASS: ${APP_DB_PASS}
    ports:
      - "${APP_PORT:-8080}:8080"
    healthcheck:
      # Requiere curl (ver nota más abajo para Dockerfile)
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/actuator/health | grep -q '\"status\":\"UP\"'"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  front:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: front
    depends_on:
      app:
        condition: service_started
    ports:
      - "${FRONT_PORT:-8081}:80"
    environment:
      # Tu variable para el front (Vite)
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-/api}
    restart: unless-stopped

  # Para usar Caddy, levántalo con:  docker compose --profile caddy up -d
  caddy:
    image: caddy:2-alpine
    container_name: caddy
    depends_on:
      front:
        condition: service_started
      app:
        condition: service_started
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddydata:/data
      - caddyconfig:/config
    ports:
      - "80:80"
      - "443:443"
    environment:
      CADDY_DOMAIN: ${CADDY_DOMAIN}
      CADDY_EMAIL: ${CADDY_EMAIL}
    profiles: ["caddy"]
    restart: unless-stopped

volumes:
  dbdata:
  caddydata:
  caddyconfig:
